
reg reset = 1, txbusy = 0, ready;
reg [7:0] serrx;

reg [15:0] rdata;
reg ack = 0;

modbus_endpoint #(
  .TMOMAX(`TMOMAX)
) dut(
  .clk(clk),
  .timeout_clk(clk),
  .reset(reset),
  .maddr(5),
  .txbusy(txbusy),
  .ready(ready),
  .rxerr(0),
  .din(serrx),
  .rdata(rdata),
  .ack(ack)
);

// TX -> MOSI
reg crctx_reset=1;
reg [15:0] crc_scratch;
mcrc crctx(
  .clk(clk),
  .reset(crctx_reset),
  .ready(ready),
  .din(serrx)
);

task uart_tx;
  input [7:0] val;
  begin
    $display("# -> %02x", val);
    @(negedge clk);
    serrx <= val;
    ready <= 1;
    @(negedge clk);
    serrx <= 8'hxx;
    ready <= 0;
    @(negedge clk);
  end
endtask

// RX -> MISO
reg crcrx_reset=0, crcrx_latch=0;
mcrc crcrx(
  .clk(clk),
  .reset(crcrx_reset),
  .ready(crcrx_latch),
  .din(dut.dout)
);

task uart_rx;
  output [7:0] val;
  begin
    while(~dut.send) @(posedge clk);
    crcrx_latch <= 1;
    val <= dut.dout;
    txbusy <= 1;
    @(posedge clk);
    crcrx_latch <= 0;
    while(dut.send) @(posedge clk);
    txbusy <= 0;
    $display("# <- %02x", val);
  end
endtask

integer i;
reg [15:0] scratch;

task mod_rx_msg;
  input [7:0] slave;
  input [7:0] func;
  input [15:0] addr;
  input [15:0] cnt;
  begin

    crctx_reset <= 1;
    @(posedge clk);
    crctx_reset <= 0;

    uart_tx(slave); // slave address
    uart_tx(func); // function
    uart_tx(addr>>8);
    uart_tx(addr);
    uart_tx(cnt>>8);
    uart_tx(cnt);
    crc_scratch = crctx.crc;
    uart_tx(crc_scratch);
    uart_tx(crc_scratch>>8);
  end
endtask
